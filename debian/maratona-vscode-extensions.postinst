#!/bin/bash
set -e
source '/usr/share/debconf/confmodule'

try_install_extension() {
	local -r options=(--extensions-dir '/opt/vscode-extensions/' --user-data-dir '/opt/vscode-extensions/')
	local try=0

	while ! flatpak run com.visualstudio.code "${options[@]}" --list-extensions | grep -q "$1" && [ "$try" -lt 3 ]; do
		flatpak run com.visualstudio.code "${options[@]}" --install-extension "$1"
		try=$((try+1))
	done

	# In case of success, return 0. In case of failure, return 1.
	if ! flatpak run com.visualstudio.code "${options[@]}" --list-extensions | grep -q "$1" ; then
		return 1
	else
		return 0
	fi
}

install_cpptools_extension() {
	local -r releases_url='https://api.github.com/repos/microsoft/vscode-cpptools/releases/latest'
	local -r releases_info_file='releases.json'
	local download_url=""
	local -r package_file='cpptools-linux.vsix'
	local -r options=(--extensions-dir '/opt/vscode-extensions/' --user-data-dir '/opt/vscode-extensions/')

	echo "Accessing $releases_url"

	# download json
	if ! wget --tries=3 --timeout=60 --output-document="$releases_info_file" "$releases_url"; then
		echo "Failed to download releases information for ms-vscode.cpptools"
		return 2
	fi

	# check file
	if [ ! -f "$releases_info_file" ] ; then
		echo "Failed to read releases information file for ms-vscode.cpptools"
		return 3
	fi

	# parse file
	if ! download_url="$(jq -r '.assets[] | select(.name == "cpptools-linux.vsix") | .browser_download_url' "$releases_info_file")" ; then
		echo "Failed to read download URL for ms-vscode.cpptools"
		return 4
	else
		rm "$releases_info_file"
	fi

	echo "Downloading from $download_url"

	# download
	if ! wget --tries=3 --timeout=60 --continue --output-document="$package_file" "$download_url" ; then
		echo "Failed to download ms-vscode.cpptools"
		return 5
	fi

	# install
	if ! flatpak run com.visualstudio.code "${options[@]}" --install-extension "$package_file" ; then
		echo "Failed to install ms-vscode.cpptools"
		return 6
	fi

	rm "$package_file"

	return 0
}

flag=true
while $flag ; do
	extensions=""

	extensions_list=(
		'austin.code-gnu-global'
		'formulahendry.code-runner'
		'vscjava.vscode-java-debug'
		'vscjava.vscode-java-dependency'
		'vscjava.vscode-java-pack'
		'vscjava.vscode-java-test'
		'redhat.java'
		'vscjava.vscode-maven'
		'ms-python.python'
	)

	for extension in "${extensions_list[@]}"
	do
		try_install_extension "$extension" || extensions=$extensions" "$extension
	done

	install_cpptools_extension || extensions=$extensions" ""ms-vscode.cpptools"

	if [ "$extensions" != "" ]; then
		db_subst maratona-vscode-extensions/question_try_again package "$extensions" || true
		db_input high maratona-vscode-extensions/question_try_again || true
		db_go || true
		db_get maratona-vscode-extensions/question_try_again || true
		if [ "$RET" == "Later" ]; then
			flag=false
			db_input high maratona-vscode-extensions/notice || true
			db_go || true
			db_get maratona-vscode-extensions/notice
		fi
	else
		flag=false
	fi
done

rm -rf '/usr/share/maratona-vscode-extensions'
mv '/opt/vscode-extensions' '/usr/share/maratona-vscode-extensions'
